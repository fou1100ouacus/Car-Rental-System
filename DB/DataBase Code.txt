-- Vehicle Table


CREATE TABLE Makes
(
  Make nvarchar(150) NOT NULL,
MakeID INT NOT NULL,
PRIMARY KEY (MakeID),

);

-----------
CREATE TABLE Models
(
  ModelName nvarchar(100) NOT NULL,
  ModelID INT NOT NULL,
  MakeID INT NOT NULL,

PRIMARY KEY (ModelID),
 FOREIGN KEY (MakeID) REFERENCES Makes(MakeID)

);





---------


CREATE TABLE SubModels
(
  SubModelName nvarchar(100) NOT NULL,
  SubModelID INT NOT NULL,
  ModelID INT NOT NULL,

PRIMARY KEY (SubModelID),
 FOREIGN KEY (ModelID) REFERENCES Models(ModelID)

);

--------
CREATE TABLE Vehicles
(
  VehicleName nvarchar(100) NOT NULL,
  Millage int NOT NULL,
  RentalPricePerDay decimal(10,2) NOT NULL,
  IsAvailableForRent bit not null,
  PlateNumber nvarchar(50) NOT NULL,
  Year smallint NOT NULL,
  Engine nvarchar(100) NOT NULL,
  NumberDoors nvarchar(50) NOT NULL,
  VehicleID INT NOT NULL,
   MakeID INT NOT NULL,
  ModelID INT NOT NULL,
  SubModelID INT NOT NULL,
  BodyID INT NOT NULL,
    FuelTypeID INT NOT NULL,
  DriveTypeID INT NOT NULL,

PRIMARY KEY (VehicleID),
 FOREIGN KEY (MakeID) REFERENCES Makes(MakeID),
  FOREIGN KEY (ModelID) REFERENCES Models(ModelID),
 FOREIGN KEY (SubModelID) REFERENCES SubModels(SubModelID),
 FOREIGN KEY (BodyID) REFERENCES Bodies(BodyID),
 FOREIGN KEY (FuelTypeID) REFERENCES FuelTypes(ID),
  FOREIGN KEY (DriveTypeID) REFERENCES DriveTypes(DriveTypeID),

);


-----

CREATE TABLE DriveTypes
(
  DriveTypeName nvarchar(100) NOT NULL,
  DriveTypeID INT NOT NULL,

PRIMARY KEY (DriveTypeID)

);

----------

CREATE TABLE Bodies
(
  BodyName nvarchar(100) NOT NULL,
  BodyID INT NOT NULL,

PRIMARY KEY (BodyID)

);
------
CREATE TABLE People
(
  FirstName nvarchar(20) NOT NULL,
  LastName nvarchar(20) NOT NULL,
  ThirdName nvarchar(20) NOT NULL,
  SecondName nvarchar(20) NOT NULL,
  Gender tinyINT NOT NULL,
  Address nvarchar(250) NOT NULL,
  NationalNum nvarchar(50) NOT NULL,
  Email nvarchar(20) NOT NULL,
  Phone nvarchar(20) NOT NULL,
  Phote nvarchar(50) NOT NULL,
  PersonID INT NOT NULL,
  CreatedAt datetime not null,
  UpdatedAt datetime null,
NationalityCountryID INT NOT NULL,
PRIMARY KEY (PersonID),
 FOREIGN KEY (NationalityCountryID) REFERENCES Countries(CountryID)

);


CREATE TABLE Users
(
  UserName INT NOT NULL,
  Password INT NOT NULL,
  UserID INT NOT NULL,
  Is_Active INT NOT NULL,
  PersonID INT NOT NULL,
  PRIMARY KEY (UserID),
  FOREIGN KEY (PersonID) REFERENCES Person(PersonID)
);




use CarRental
CREATE TABLE Vehicle (
    VehicleID INT PRIMARY KEY,
    Make NVARCHAR(50),
    Model NVARCHAR(50),
    Year INT,
    Mileage INT,
    FuelTypeID INT FOREIGN KEY REFERENCES FuelTypes(ID),
    PlateNumber NVARCHAR(20),
    CarCategoryID INT FOREIGN KEY REFERENCES VehicleCategories(CategoryID),
    RentalPricePerDay DECIMAL(10, 2),
    IsAvailableForRent BIT
);

-- Vehicle Categories Table
CREATE TABLE VehicleCategories (
    CategoryID INT PRIMARY KEY,
    CategoryName NVARCHAR(50)
);

-- Fuel Types Table
CREATE TABLE FuelTypes (
    ID INT PRIMARY KEY,
    FuelType NVARCHAR(20)
);

-- Maintenance Table
CREATE TABLE Maintenance (
    MaintenanceID INT PRIMARY KEY,
    VehicleID INT FOREIGN KEY REFERENCES Vehicle(VehicleID),
    Description NVARCHAR(300),
    MaintenanceDate DATE,
    Cost DECIMAL(10, 2)
);

-- Rental Booking Table
CREATE TABLE RentalBooking (
    BookingID INT PRIMARY KEY,
    CustomerID INT FOREIGN KEY REFERENCES Customer(CustomerID),
    VehicleID INT FOREIGN KEY REFERENCES Vehicle(VehicleID),
    RentalStartDate DATE,
    RentalEndDate DATE,
    PickupLocation NVARCHAR(100),
    DropoffLocation NVARCHAR(100),
    InitialRentalDays TINYINT,
    RentalPricePerDay SMALLMONEY,
    InitialTotalDueAmount SMALLMONEY,
    InitialCheckNotes NVARCHAR(500)
);

-- Rental Transaction Table
CREATE TABLE RentalTransaction (
    TransactionID INT PRIMARY KEY,
    BookingID INT FOREIGN KEY REFERENCES RentalBooking(BookingID),
    ReturnID INT FOREIGN KEY REFERENCES VehicleReturns(ReturenID),
    PaymentDetails NVARCHAR(100),
    PaidInitialTotalDueAmount SMALLMONEY,
    ActualTotalDueAmount SMALLMONEY,
    TotalRemaining SMALLMONEY,
    TotalRefundedAmount SMALLMONEY,
    TransactionDate DATETIME,
    UpdatedTransactionDate DATETIME
);

-- Vehicle Returns Table
CREATE TABLE VehicleReturns (
    ReturenID INT PRIMARY KEY,
    ActualReturnDate DATETIME,
    ActualRentalDays TINYINT,
    Mileage SMALLINT,
    ConsumedMileage SMALLINT,
    FinalCheckNotes NVARCHAR(500),
    AdditionalCharges SMALLMONEY,
    ActualTotalDueAmount SMALLMONEY
);

-- Customer Table
CREATE TABLE Customer (
    CustomerID INT PRIMARY KEY,
    Name NVARCHAR(100),
    ContactInformation NVARCHAR(100),
    DriverLicenseNumber NVARCHAR(20)
)
--------------
---------------
-- View for Available Vehicles
CREATE VIEW AvailableVehicles AS
SELECT v.VehicleID, v.Make, v.Model, v.Year, v.RentalPricePerDay
FROM Vehicle v
WHERE v.IsAvailableForRent = 1;

-- View for Active Bookings
CREATE VIEW ActiveBookings AS
SELECT rb.BookingID, rb.CustomerID, rb.VehicleID, rb.RentalStartDate, rb.RentalEndDate, rb.InitialTotalDueAmount
FROM RentalBooking rb
WHERE rb.RentalEndDate >= GETDATE();

-- View for Customer Rental History
CREATE VIEW CustomerRentalHistory AS
SELECT c.Name, c.ContactInformation, rb.RentalStartDate, rb.RentalEndDate, rt.ActualTotalDueAmount
FROM Customer c
JOIN RentalBooking rb ON c.CustomerID = rb.CustomerID
JOIN RentalTransaction rt ON rb.BookingID = rt.BookingID;
